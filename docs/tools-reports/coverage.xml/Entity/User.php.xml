<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="User.php" path="/Entity">
    <totals>
      <lines total="163" comments="37" code="126" executable="16" executed="14" percent="87.50"/>
      <methods count="11" tested="10" percent="90.91"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="App\Entity\User" start="14" executable="16" executed="14" crap="11.24">
      <namespace name="App\Entity"/>
      <method name="getUserIdentifier" signature="getUserIdentifier(): string" start="50" end="53" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getRoles" signature="getRoles(): array" start="62" end="69" crap="1" executable="3" executed="3" coverage="100"/>
      <method name="setRoles" signature="setRoles(array $roles): static" start="76" end="81" crap="2" executable="2" executed="0" coverage="0"/>
      <method name="getId" signature="getId(): ?int" start="83" end="86" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getUsername" signature="getUsername(): string" start="88" end="98" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setUsername" signature="setUsername(string $username): self" start="103" end="108" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="getPassword" signature="getPassword(): string" start="113" end="123" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setPassword" signature="setPassword(string $password): self" start="128" end="133" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="eraseCredentials" signature="eraseCredentials(): void" start="138" end="144" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getEmail" signature="getEmail(): string" start="146" end="156" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setEmail" signature="setEmail(string $email): void" start="158" end="161" crap="1" executable="1" executed="1" coverage="100"/>
    </class>
    <coverage>
      <line nr="52">
        <covered by="App\Tests\Security\LoginTest::testShouldAuthenticatedUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\LoginTest::testShouldLogoutUserAndRedirectToLogin"/>
        <covered by="App\Tests\Task\CreateTest::testShouldCreateTaskAndRedirectToShowPage"/>
        <covered by="App\Tests\Task\CreateTest::testShouldRaiseFormErrors#blank title"/>
        <covered by="App\Tests\Task\CreateTest::testShouldRaiseFormErrors#blank content"/>
        <covered by="App\Tests\Task\DeleteTest::testShouldDeleteTaskAndRedirectToListPage"/>
        <covered by="App\Tests\Task\DeleteTest::testShouldRaiseHttpAccessDenied"/>
        <covered by="App\Tests\Task\DeleteTest::testAdminCanDeleteOtherUserTask"/>
        <covered by="App\Tests\Task\ListTest::testShouldListTasks"/>
        <covered by="App\Tests\Task\ToggleTest::testShouldToogleTask"/>
        <covered by="App\Tests\Task\ToggleTest::testShouldRaiseHttpAccessDenied"/>
        <covered by="App\Tests\Task\ToggleTest::testAdminCanToggleOtherUserTask"/>
        <covered by="App\Tests\Task\UpdateTest::testShouldUpdateTaskAndRedirectToShowPage"/>
        <covered by="App\Tests\Task\UpdateTest::testShouldRaiseFormErrors#blank title"/>
        <covered by="App\Tests\Task\UpdateTest::testShouldRaiseFormErrors#blank content"/>
      </line>
      <line nr="64">
        <covered by="App\Tests\Security\LoginTest::testShouldAuthenticatedUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\LoginTest::testShouldLogoutUserAndRedirectToLogin"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRegisterUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank username"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank password"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#invalid email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseUsernameAlreadyUsedError"/>
        <covered by="App\Tests\Task\CreateTest::testShouldCreateTaskAndRedirectToShowPage"/>
        <covered by="App\Tests\Task\CreateTest::testShouldRaiseFormErrors#blank title"/>
        <covered by="App\Tests\Task\CreateTest::testShouldRaiseFormErrors#blank content"/>
        <covered by="App\Tests\Task\DeleteTest::testShouldDeleteTaskAndRedirectToListPage"/>
        <covered by="App\Tests\Task\DeleteTest::testShouldRaiseHttpAccessDenied"/>
        <covered by="App\Tests\Task\DeleteTest::testAdminCanDeleteOtherUserTask"/>
        <covered by="App\Tests\Task\ListTest::testShouldListTasks"/>
        <covered by="App\Tests\Task\ToggleTest::testShouldToogleTask"/>
        <covered by="App\Tests\Task\ToggleTest::testShouldRaiseHttpAccessDenied"/>
        <covered by="App\Tests\Task\ToggleTest::testAdminCanToggleOtherUserTask"/>
        <covered by="App\Tests\Task\UpdateTest::testShouldUpdateTaskAndRedirectToShowPage"/>
        <covered by="App\Tests\Task\UpdateTest::testShouldRaiseFormErrors#blank title"/>
        <covered by="App\Tests\Task\UpdateTest::testShouldRaiseFormErrors#blank content"/>
      </line>
      <line nr="66">
        <covered by="App\Tests\Security\LoginTest::testShouldAuthenticatedUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\LoginTest::testShouldLogoutUserAndRedirectToLogin"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRegisterUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank username"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank password"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#invalid email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseUsernameAlreadyUsedError"/>
        <covered by="App\Tests\Task\CreateTest::testShouldCreateTaskAndRedirectToShowPage"/>
        <covered by="App\Tests\Task\CreateTest::testShouldRaiseFormErrors#blank title"/>
        <covered by="App\Tests\Task\CreateTest::testShouldRaiseFormErrors#blank content"/>
        <covered by="App\Tests\Task\DeleteTest::testShouldDeleteTaskAndRedirectToListPage"/>
        <covered by="App\Tests\Task\DeleteTest::testShouldRaiseHttpAccessDenied"/>
        <covered by="App\Tests\Task\DeleteTest::testAdminCanDeleteOtherUserTask"/>
        <covered by="App\Tests\Task\ListTest::testShouldListTasks"/>
        <covered by="App\Tests\Task\ToggleTest::testShouldToogleTask"/>
        <covered by="App\Tests\Task\ToggleTest::testShouldRaiseHttpAccessDenied"/>
        <covered by="App\Tests\Task\ToggleTest::testAdminCanToggleOtherUserTask"/>
        <covered by="App\Tests\Task\UpdateTest::testShouldUpdateTaskAndRedirectToShowPage"/>
        <covered by="App\Tests\Task\UpdateTest::testShouldRaiseFormErrors#blank title"/>
        <covered by="App\Tests\Task\UpdateTest::testShouldRaiseFormErrors#blank content"/>
      </line>
      <line nr="68">
        <covered by="App\Tests\Security\LoginTest::testShouldAuthenticatedUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\LoginTest::testShouldLogoutUserAndRedirectToLogin"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRegisterUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank username"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank password"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#invalid email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseUsernameAlreadyUsedError"/>
        <covered by="App\Tests\Task\CreateTest::testShouldCreateTaskAndRedirectToShowPage"/>
        <covered by="App\Tests\Task\CreateTest::testShouldRaiseFormErrors#blank title"/>
        <covered by="App\Tests\Task\CreateTest::testShouldRaiseFormErrors#blank content"/>
        <covered by="App\Tests\Task\DeleteTest::testShouldDeleteTaskAndRedirectToListPage"/>
        <covered by="App\Tests\Task\DeleteTest::testShouldRaiseHttpAccessDenied"/>
        <covered by="App\Tests\Task\DeleteTest::testAdminCanDeleteOtherUserTask"/>
        <covered by="App\Tests\Task\ListTest::testShouldListTasks"/>
        <covered by="App\Tests\Task\ToggleTest::testShouldToogleTask"/>
        <covered by="App\Tests\Task\ToggleTest::testShouldRaiseHttpAccessDenied"/>
        <covered by="App\Tests\Task\ToggleTest::testAdminCanToggleOtherUserTask"/>
        <covered by="App\Tests\Task\UpdateTest::testShouldUpdateTaskAndRedirectToShowPage"/>
        <covered by="App\Tests\Task\UpdateTest::testShouldRaiseFormErrors#blank title"/>
        <covered by="App\Tests\Task\UpdateTest::testShouldRaiseFormErrors#blank content"/>
      </line>
      <line nr="85">
        <covered by="App\Tests\Task\DeleteTest::testShouldDeleteTaskAndRedirectToListPage"/>
        <covered by="App\Tests\Task\DeleteTest::testShouldRaiseHttpAccessDenied"/>
        <covered by="App\Tests\Task\DeleteTest::testAdminCanDeleteOtherUserTask"/>
        <covered by="App\Tests\Task\ToggleTest::testShouldToogleTask"/>
        <covered by="App\Tests\Task\ToggleTest::testShouldRaiseHttpAccessDenied"/>
        <covered by="App\Tests\Task\ToggleTest::testAdminCanToggleOtherUserTask"/>
      </line>
      <line nr="97">
        <covered by="App\Tests\Security\RegistrationTest::testShouldRegisterUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank username"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank password"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#invalid email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseUsernameAlreadyUsedError"/>
      </line>
      <line nr="105">
        <covered by="App\Tests\Security\RegistrationTest::testShouldRegisterUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank password"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#invalid email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseUsernameAlreadyUsedError"/>
      </line>
      <line nr="107">
        <covered by="App\Tests\Security\RegistrationTest::testShouldRegisterUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank password"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#invalid email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseUsernameAlreadyUsedError"/>
      </line>
      <line nr="122">
        <covered by="App\Tests\Security\LoginTest::testShouldAuthenticatedUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\LoginTest::testShouldNotAuthenticateUser#invalid password"/>
        <covered by="App\Tests\Security\LoginTest::testShouldLogoutUserAndRedirectToLogin"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRegisterUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank username"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank password"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#invalid email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseUsernameAlreadyUsedError"/>
        <covered by="App\Tests\Task\CreateTest::testShouldCreateTaskAndRedirectToShowPage"/>
        <covered by="App\Tests\Task\CreateTest::testShouldRaiseFormErrors#blank title"/>
        <covered by="App\Tests\Task\CreateTest::testShouldRaiseFormErrors#blank content"/>
        <covered by="App\Tests\Task\DeleteTest::testShouldDeleteTaskAndRedirectToListPage"/>
        <covered by="App\Tests\Task\DeleteTest::testShouldRaiseHttpAccessDenied"/>
        <covered by="App\Tests\Task\DeleteTest::testAdminCanDeleteOtherUserTask"/>
        <covered by="App\Tests\Task\ListTest::testShouldListTasks"/>
        <covered by="App\Tests\Task\ToggleTest::testShouldToogleTask"/>
        <covered by="App\Tests\Task\ToggleTest::testShouldRaiseHttpAccessDenied"/>
        <covered by="App\Tests\Task\ToggleTest::testAdminCanToggleOtherUserTask"/>
        <covered by="App\Tests\Task\UpdateTest::testShouldUpdateTaskAndRedirectToShowPage"/>
        <covered by="App\Tests\Task\UpdateTest::testShouldRaiseFormErrors#blank title"/>
        <covered by="App\Tests\Task\UpdateTest::testShouldRaiseFormErrors#blank content"/>
      </line>
      <line nr="130">
        <covered by="App\Tests\Security\RegistrationTest::testShouldRegisterUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank username"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#invalid email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseUsernameAlreadyUsedError"/>
      </line>
      <line nr="132">
        <covered by="App\Tests\Security\RegistrationTest::testShouldRegisterUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank username"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#invalid email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseUsernameAlreadyUsedError"/>
      </line>
      <line nr="144">
        <covered by="App\Tests\Security\LoginTest::testShouldAuthenticatedUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\LoginTest::testShouldLogoutUserAndRedirectToLogin"/>
      </line>
      <line nr="155">
        <covered by="App\Tests\Security\RegistrationTest::testShouldRegisterUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank username"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank password"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#invalid email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseUsernameAlreadyUsedError"/>
      </line>
      <line nr="160">
        <covered by="App\Tests\Security\RegistrationTest::testShouldRegisterUserAndRedirectToIndex"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank username"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#blank password"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseFormErrors#invalid email"/>
        <covered by="App\Tests\Security\RegistrationTest::testShouldRaiseUsernameAlreadyUsedError"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Entity</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6"/>
      <line no="7">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Doctrine\DBAL\Types\Types</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="8">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Doctrine\ORM\Mapping</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ORM</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="9">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="10">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Symfony\Component\Security\Core\User\UserInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="12">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Symfony\Component\Validator\Constraints</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Assert</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="13"/>
      <line no="14">
        <token name="T_ATTRIBUTE">#[</token>
        <token name="T_NAME_QUALIFIED">ORM\Entity</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="15">
        <token name="T_ATTRIBUTE">#[</token>
        <token name="T_NAME_QUALIFIED">ORM\Table</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">name</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="16">
        <token name="T_ATTRIBUTE">#[</token>
        <token name="T_STRING">UniqueEntity</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="17">
        <token name="T_WHITESPACE">    </token>
        <token name="T_STRING">fields</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="18">
        <token name="T_WHITESPACE">    </token>
        <token name="T_STRING">message</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Cette adresse email est d&#xE9;j&#xE0; utilis&#xE9;e.'</token>
      </line>
      <line no="19">
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="20">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">User</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">UserInterface</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PasswordAuthenticatedUserInterface</token>
      </line>
      <line no="21">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">    </token>
        <token name="T_ATTRIBUTE">#[</token>
        <token name="T_NAME_QUALIFIED">ORM\Id</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">    </token>
        <token name="T_ATTRIBUTE">#[</token>
        <token name="T_NAME_QUALIFIED">ORM\GeneratedValue</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">    </token>
        <token name="T_ATTRIBUTE">#[</token>
        <token name="T_NAME_QUALIFIED">ORM\Column</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">type</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Types</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">INTEGER</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$id</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="26"/>
      <line no="27">
        <token name="T_WHITESPACE">    </token>
        <token name="T_ATTRIBUTE">#[</token>
        <token name="T_NAME_QUALIFIED">ORM\Column</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">type</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Types</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">STRING</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">length</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">25</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">unique</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">    </token>
        <token name="T_ATTRIBUTE">#[</token>
        <token name="T_NAME_QUALIFIED">Assert\NotBlank</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">message</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Vous devez saisir un nom d'utilisateur."</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$username</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="30"/>
      <line no="31">
        <token name="T_WHITESPACE">    </token>
        <token name="T_ATTRIBUTE">#[</token>
        <token name="T_NAME_QUALIFIED">ORM\Column</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">type</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Types</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">STRING</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">length</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">50</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$password</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="33"/>
      <line no="34">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="35">
        <token name="T_DOC_COMMENT">     * @var array&lt;string&gt; roles assigned to the user</token>
      </line>
      <line no="36">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">    </token>
        <token name="T_ATTRIBUTE">#[</token>
        <token name="T_NAME_QUALIFIED">ORM\Column</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$roles</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="39"/>
      <line no="40">
        <token name="T_WHITESPACE">    </token>
        <token name="T_ATTRIBUTE">#[</token>
        <token name="T_NAME_QUALIFIED">ORM\Column</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">type</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Types</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">STRING</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">length</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">60</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">unique</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">    </token>
        <token name="T_ATTRIBUTE">#[</token>
        <token name="T_NAME_QUALIFIED">Assert\NotBlank</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">message</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Vous devez saisir une adresse email.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_ATTRIBUTE">#[</token>
        <token name="T_NAME_QUALIFIED">Assert\Email</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">message</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Le format de l'adresse n'est pas correcte."</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="44"/>
      <line no="45">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="46">
        <token name="T_DOC_COMMENT">     * A visual identifier that represents this user.</token>
      </line>
      <line no="47">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="48">
        <token name="T_DOC_COMMENT">     * @see UserInterface</token>
      </line>
      <line no="49">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getUserIdentifier</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">username</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="53">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="54"/>
      <line no="55">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="56">
        <token name="T_DOC_COMMENT">     * Gets roles assigned to the user.</token>
      </line>
      <line no="57">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="58">
        <token name="T_DOC_COMMENT">     * @return array&lt;string&gt; an array of role strings</token>
      </line>
      <line no="59">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="60">
        <token name="T_DOC_COMMENT">     * @see UserInterface</token>
      </line>
      <line no="61">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getRoles</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$roles</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">roles</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// guarantee every user at least has ROLE_USER</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$roles</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'ROLE_USER'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="67"/>
      <line no="68">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_unique</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$roles</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="70"/>
      <line no="71">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="72">
        <token name="T_DOC_COMMENT">     * Set the roles for the user.</token>
      </line>
      <line no="73">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="74">
        <token name="T_DOC_COMMENT">     * @param array&lt;string&gt; $roles an array of role strings</token>
      </line>
      <line no="75">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setRoles</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$roles</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">roles</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$roles</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="79"/>
      <line no="80">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="82"/>
      <line no="83">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">int</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="85">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">id</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="87"/>
      <line no="88">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getUsername</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">assert</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">username</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">            </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\LogicException</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Username should not be accessed before it has been set.'</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="96"/>
      <line no="97">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">username</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="98">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="99"/>
      <line no="100">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="101">
        <token name="T_DOC_COMMENT">     * @return $this</token>
      </line>
      <line no="102">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setUsername</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$username</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
      </line>
      <line no="104">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="105">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">username</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$username</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="106"/>
      <line no="107">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="109"/>
      <line no="110">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="111">
        <token name="T_DOC_COMMENT">     * @see PasswordAuthenticatedUserInterface</token>
      </line>
      <line no="112">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getPassword</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">assert</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">password</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">            </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\LogicException</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Password should not be accessed before it has been set.'</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="121"/>
      <line no="122">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">password</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="123">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="124"/>
      <line no="125">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="126">
        <token name="T_DOC_COMMENT">     * @return $this</token>
      </line>
      <line no="127">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="128">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setPassword</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$password</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">password</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$password</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="131"/>
      <line no="132">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="134"/>
      <line no="135">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="136">
        <token name="T_DOC_COMMENT">     * @see UserInterface</token>
      </line>
      <line no="137">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="138">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">eraseCredentials</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="139">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="140">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// If you store any temporary,</token>
      </line>
      <line no="141">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// sensitive data on the user,</token>
      </line>
      <line no="142">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// clear it here</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// $this-&gt;plainPassword = null;</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="145"/>
      <line no="146">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="147">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="148">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">assert</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">email</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">            </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\LogicException</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="151">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Email should not be accessed before it has been set.'</token>
      </line>
      <line no="152">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="153">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="154"/>
      <line no="155">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">email</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="156">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="157"/>
      <line no="158">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="159">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="160">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">email</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$email</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="161">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="162">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="163"/>
    </source>
  </file>
</phpunit>
